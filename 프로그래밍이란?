[운영체제(OS, Operating System)]


 - 종류 : windows, 리눅스, mac os 등
         (windows와 mac은 주로 개인용 pc / 리눅스(모체:유닉스)는 기업용 서버에 많이 사용)
         【 면접에서 리눅스를 다뤄본 적 있는지 질문할 수 있음. 다뤄보지 않은 경우가 많겠지만 그래도 리눅스의
            모체가 유닉스고, 기업용 서버에 사용한다는 것을 알고 있다고 대답하는 것이 좋음 】
            
 - 용도 : 응용 어플리케이션(유튜브, 엑셀, 한글, 게임 등 = 프로그램 = 프로세스)를 사용하기 위해 필요.
           = 응용 어플리케이션을 실행하면 RAM에 올리는 주체
           = 응용 어플리케이션을 관리하기 위한 역할 (메모리 주소를 통해)
           
 - 특징 
   1. 각 OS에 따라 다르게 응용 어플리케이션을 만들어야만 해당 OS에서 실행시킬 수 있음.
      (다른 OS에서는 실행되지 x. 기본적으로 기본 플랫폼이 만들어진 운영체제에 귀속되기 때문.)
      (자바의 경우에는 컴파일한 클래스 파일이 서로 다른 운영체제에서도 실행 가능. 이유는 JVM. 각 운영체제별
       jdk를 설치하면 그 안에 각 운영체제와 자바 프로그램을 통신시켜주는 각 운영체제별 JVM이 둘을 연결시켜줘
       같은 소스코드여도 모든 운영체제에서 실행가능한 것.)
       
   2. OS의 32 bit / 64 bit는 '속도 차이'
      (숫자의 의미는 CPU와 RAM 사이 '선의 개수'. 선 하나에 0/1 둘 중 하나를 전기 신호로 보냄)
      (ex. long형의 데이터를 CPU에 보낸다고 생각할 때, 8바이트기 때문에 64bit일 때는 한 번에 보낼 수 있음.
           그러나 32bit의 경우는 4바이트가 최대이므로 두 번에 나눠서 데이터를 보내야 하기 때문에 느릴 수밖에
           없음.)
           
   3. 운영체제가 직접 알아듣는 확장자 = .exe
    
  ------------------------------------------------------------------------------------------------------------  
    
    
[하드웨어]


 - CPU : 컴퓨터의 모든 프로그램(OS포함)은 무조건 CPU를 거쳐야만 함.
          (cf. 최근에는 AI 때문에 GPU도 알아두면 좋음)
          
 - RAM : 메모리. 전기가 들어와 있는 동안은 데이터가 저장되지만, 전기가 차단되면 저장되었던 것이 전부 지워짐.
 
 - HDD : 메모리. 전기가 차단되어도 데이터가 저장됨. (응용 어플리케이션이 기계어로 install(설치)되는 곳)
 
 - 하드웨어 작동 원리 :
   ① 응용 어플리케이션을 실행(더블클릭)
   
   ② RAM으로 올라감 (RAM을 거치면 직접 CPU로 올리는 것보다 빠름)
   
   ③ CPU와 통신을 하면서 연산 + 실행시킴
    → 이 전체 과정은 2진법 데이터로만 이루어짐
       ( HDD에서 미세한 핀으로 홈을 파고 (= 1은 파지 않고 0일 때만) 그것을 가지고 2진수 데이터가 만들어짐.
         그대로 RAM에 올려서 - CPU가 연산)

    → 실행시키는 프로세스가 'JAVA' 파일인 경우?
       - javac 클래스이름.java ("compile") : 소스코드 파일(.java)을 컴퓨터가 알아듣는 2진법의 파일
                                               (.class = 클래스 파일)로 만듦.
       - java 클래스이름 : 클래스 파일을 실행시킴 ( = 더블클릭 + RAM에 올림 + CPU 연산)

--------------------------------------------------------------------------------------------------------------


 ** 프로그래밍이란? 컴퓨터(CPU)가 알아듣는 언어로 지시서를 만들어 실행시키는 것
                  (따라서 사실상 소스코드 파일을 만들지 않아도 이진수로 된 클래스 파일을 만들 수 있다면 '클래스 파일' 만드는 것이 
                   바로 '프로그래밍')

 ** 프로그래밍 언어란? 컴퓨터가 알아듣는 이진수로 된 '기계어'(기계어, 어셈블리어)로 인간이 프로그램을 짜는 것은 너무 어려운 일.
                      따라서 인간은 프로그래밍 언어(고급 언어 = 자바, C언어 등)로 지시서를 만들고 그것을 기계어로 번역(컴파일)해 
                      컴퓨터가 지시사항을 수행하도록 함.
