[자바 기초 - 인터페이스와 추상클래스]



 - 자바의 70%는 다형성, 나머지 20%는 인터페이스(역시 상속)
 - 인터페이스를 활용한 다형성을 매우 많이 사용하게 될 것.


 1. 인터페이스
    - 형태 : interface (예전의 'class' 자리) + 인터페이스 이름 { 
		 메소드 호출 = 구현 부분 {} 이 없는 메소드 = " 추상 메소드 "
	     }

	→ ex. interface Printable {
		  public void print(String doc);	------------------------- 구현 부분 { } 이 없는 메소드.
	      }						                          '함수 호출'이 옴.
	→ ★ 구현 부분이 없는 이유 : " abstract public " (원래는 함수 호출부분 맨 앞에 이것이 붙기 때문인데, 생략도 가능)
					                 (아무 것도 붙이지 않으면 컴파일러가 알아서 둘을 붙인 상태로 만들어줌)
				         	         (interface는 무조건 public)
	→ ★ abstract 의미 : " 메소드는 자손이 구현하라 "

    - 특징 ① 객체 생성 X (클래스는 내용이 아무 것도 없이 이름만 있어도 객체 생성이 되지만, 인터페이스는 new 가 안됨.)
		         (이유 ? interface는 생성자 자체가 x)
		         (주의 사항 : 객체 생성은 안되지만, 변수 선언은 가능)
		           → ex. Printable p;   --------------------------------------------- 가능 (타입 : Printable / 크기 : 4바이트)
		                 Printable p = new Printable();  ------------------------- 불가능
				 
	   ② 인터페이스형 참조변수 선언 가능
	      → ex.   Printable prn = new Printer();
		      prn.print("Hello");

	   ③ 이름 규칙 : I + 인터페이스 이름  /  인터페이스 이름 + able
	

     - 사용 방법 : class + 클래스 이름 + implements + 인터페이스 이름 { 구현할 메소드 }
	         → { } 사이의 메소드를 구현하는 것은 '클래스' = 클래스 메소드를 오버라이딩하는 것
	         → interface 만드는 키워드 : implements 
	         → 상속의 extends와 비슷한 기능을 하지만, 상속이 아닌 '구현'을 하는 것.

     - 존재 이유 : extends 가 다중 상속이 안되고 단일 상속만 되기 때문에, 다중 상속을 지원하기 위해 implements를 만듦.
	          = 둘 이상의 인터페이스를 구현 할 수 있음.
	
     - 어떤 상황에 사용할까 ?
        ① 하나의 표준(규약)을 만들어서 (= 인터페이스) 각기 다른 상황을 적용시켜 같은 규격으로 실행되도록 함
	→ 인터페이스에 들어 있는 메소드 (이름 + 매개 변수 타입)을 가지고, 각 클래스마다 implements 해서 같은 이름의 메소드를 만들면,
	  객체 생성 후 클래스 별로 같은 규격을 가진 다른 성격의 메소드를 호출 가능.
        ② implements 후에 객체를 생성해서 메소드를 불러오는 방법은 두 가지 방법으로 가능.
            1) 자손 객체 + 변수 이름 = new 자손 객체();
            2) 부모 객체 + 변수 이름 = new 자손 객체();
 	→ 1보다는 2가 좋은 방법.
	→ 클래스가 비슷한 이름으로 여러 개 생성될 수 있는데, 
	  이걸 객체 생성할 때 2번이면 데이터 타입 + 생성자를 모두 바꿔야 하지만, 1번이면 생성자만 바꿔주면 됨.

