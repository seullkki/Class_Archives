[자바 기초 - 타입 2. 상수]


< 상수(constant) >
 - 데이터를 저장할 수 있는 '메모리 공간' = 변수
 - 상수는 선언과 동시에 초기화해야 함

 - 변수와 차이점 
   ① 변수에 값을 '한번만' 할당할 수 있음 = 변경 x = "초기화 한번에 끝"
   ② 'final'이 붙음

 - 상수 이름 규칙
   ① final + 변수 선언
   ② 변수의 이름은 '전체 대문자', 합성어는 _ 로 연결(스네이크 표기법)

 - 예시 : final int MAX_SIZE = 200;
          final double PI = 3.14; (cf. 파이는 클래스화 되어있기도 함 = Math.PI)


< 리터럴(literals) >
 - "값" (자료형을 기반으로 표현되는 상수) 
 
 - 데이터가 저장된 메모리 공간의 이름이 x
   (각 리터럴 상수가 CPU에 전해져야 연산을 하기 때문에, 리터럴 상수마다 메모리에 공간을 할당 받고 CPU로 가서 연산됨)

 - 정수형, 실수형, 문자형, 문자열, 논리형, null형(null 값 하나) 리터럴
 
 - 리터럴 타입 접미사
   : 자바에서 자동으로 int, double형으로 변환하는 것을 접미사를 붙여 원형으로 표기할 수 있음.
   : F/f, D/d, L/l
   
    (ex. long형 상수 - **********L
          System.out.println(314748347 + 314748348);  -  에러
          System.out.println(314748347L + 314748348L);   -  에러X
          → 정수형은 자동으로 int로 변환되는데, 두 숫자는 int의 범위를 넘어가므로 에러가 남
          → 따라서 long형임을 명시해주면 에러가 나지 x )
          
    (ex. 실수형 상수
         System.out.println(3.1474834 + 3.1474834);  -  에러는 아니지만, float 형으로 표현하려면 뒤에 F/f를 붙여주어야 함
                                                     -  D/d 더블형임을 표시하는 것은 해도 되고 안해도 됨)

 - 진법 표현
   8진수 : 0*****
   16진수 : 0x****
   2진수 : 0B****
   
   cf. 숫자 자릿수 구분용 _ : , 대신 _ 를 써서 자릿수를 구분할 수 있음 (메모리에는 _ 생략됨)


