[자바 기초 - 4. 객체 지향(OOP)]



* 절차 지향 프로그래밍 vs 객체 지향 프로그래밍?

 ★ 객체 지향 프로그래밍의 특징 (소스 코드 상에서 어떻게 표현되는가 / 의미는 반드시 알아둘 것)
     ① 정보 은닉 (hidden information)
     ② 상속 (inheritance)
     ③ 다형성 (polymorphism) (OOP의 70%)
     ④ 캡슐화 (encapsulation)



① 정보 은닉 (hidden information)
  - 필요 이유 : 사용자가 코드의 의도와 다른 오류를 발생시킬 수 있는 데이터와 함수에 직접 접근하는 것을 막기 위해
  - 의미 : 접근 제한자를 사용해 데이터에 접근하는 것을 제한하는 것.
  - ★ 일반 인스턴스 변수 앞에 접근 제한자 "private"을 반드시 무조건 붙일 것 ★
   
        ▶ 예시                                                  → 코드가 어떻게 작동하는지 반드시 파악
              class Circle {
                  double rad = 0;      // 원의 반지름
                  final double PI = 3.14;

                  public Circle(double r) {
                      setRad(r);
                  }

                  public void setRad(double r) {
                          if(r < 0) {
                                rad = 0;
                                return;
                          }
                          rad = r;
                  }

                  public double getArea() {
                          return (rad * rad) * PI;
                  }
              }
        -------------------------------------------------
	public static void main(String args[]) {
		Circle c = new Circle(1.5);
		System.out.println(c.getArea());
 
 		c.setRad(2.5);                                     
		System.out.println(c.getArea());
		c.setRad(-3.3);                                    → setRad의 if문으로 걸러짐
		System.out.println(c.getArea());
 		c.rad = -4.5;    // 컴파일 오류 발생 안함           → setRad 함수를 거치지 않고 변수에 직접 접근해 변수에 값을 대입한 경우,
		System.out.println(c.getArea());                      반지름이 음수로 입력된 오류 자체를 거르지 못하고, 결과값도 양수로 출력함.
	}                                                              
                                                                     
        ======================================================================================

         class Circle {
             private double rad = 0;                            → 일반 인스턴스 변수 앞에
             final double PI = 3.14;                            → 접근 제한자 'private'만 추가해주어도

             public Circle(double r) {
                   setRad(r);
             }
             public void setRad(double r) {  // Setter
                   f(r < 0) {
                       rad = 0;
                       return;
                   }
                   rad = r;
             }
             public double getRad() {   // Getter
                   return rad;
             }
            public double getArea() {...}
        }

      ---------------------------------------------------

            public static void main(String args[]) {
                  Circle c = new Circle(1.5);
                  System.out.println(c.getArea());
 
                  c.setRad(2.5);
                  System.out.println(c.getArea());
                  c.setRad(-3.3);
                  System.out.println(c.getArea());
                  c.rad = -4.5;    // 컴파일 오류로 이어짐          → 잘못된 부분을 에러로 잡음으로써 코드를 고칠 수 있음.
                  System.out.println(c.getArea());                       
            }


       → 오류 방지 방법 : 사용자가 특정 부분에 접근하지 못하도록 함.
		                     = "접근 제한자"를 사용함 
	                       = 위 예시에서는 변수에 접근하지 못하도록 일반 인스턴스 변수 앞에 'private'이라는 접근 제한자를 써주면
                           c.rad = - 4.5; 처럼 변수에 직접 접근하려 할 때, 에러가 나면서 오류를 거를 수 있게 됨.
                           (c.rad가 있는 클래스에서 Circle 클래스로 접근하려는 것이므로, 같은 클래스에서 접근하려는 것이 아니므로 오류가 됨)
                                
		                 = ★★ 따라서 일반 인스턴스 변수 앞에는 접근 제한자 'private'을 반드시, 무조건 붙일 것  
                            +  멤버에 대한 접근은 '함수'를 통해서만 가능하도록 설계하자★★
                       ★ 메소드는 보통 public

  - 4개 접근 수준 지시자 (접근 제한자)
    1. 의미 : 위의 예시와 같이 변수 뿐만 아니라, 함수, 클래스에도 접근을 제어할 수 있도록 하는 키워드가 있음.
    2. 특징 : 클래스, 변수, 함수 등 앞에 붙일 수 있음. 그러나 각각 붙일 수 있는 제한자가 정해져 있음.
    3. 종류 : ① public / ② protected / ③ default / ④ private

           << 클래스에 붙일 수 있는 접근 제한자 : ① public, ③ default (두 가지만 가능) >>

             → ① public : 다른 모든 패키지에서 public이 붙은 클래스에 접근해 불러올 수 있음(import).
                             = 다른 패키지에서도 해당 클래스로 객체 생성 가능.
                             = 어디서든 해당 클래스로 객체 생성 가능
                               (↔ default 상태인 클래스로 객체를 만들려면 에러 발생)
                            
             → ③ default : default 접근 제한자는 'default'라고 명시하는 것이 아니라, 아무 것도 붙지 않은 상태를 의미
                             = "같은 패키지 안에서만" 객체를 생성할 수 있음.
                               (cf. default package = 내가 패키지 이름을 지정 안 했을 때, 기본으로 정해주는 패키지)
                                                        

          << 인스턴스 변수, 메소드에 붙일 수 있는 접근 제한자 : ① public / ② protected / ③ default / ④ private >>
            
              → cf. 지역 변수 (x), 인스턴스 변수(o) : 지역 변수는 유효 범위가 끝나면 사라지기 때문에, public 등은 전혀 의미가 x.
                                                           
              → ④ private : 같은 클래스 내에서만 접근 가능
              → ② protected : 상속 관계일 때, 상속을 한 번만 한다는 의미.
              → ① public : 어디서든 접근 가능
                              * public static void main(String[] args){ }
                                -----
                                  ↓
                                "약속" : 소스코드를 컴파일해서 실행시키면, JVM이 파일을 읽은 후 메모리에 올리는데 
                                         이때 JVM이 가장 먼저 호출하는 것은 main 메소드.
                                         이 main 메소드를 호출하는 명령을 보통 이클립스나 cmd 같은 외부에서 하는 경우가 많기 때문에,
                                         이를 표현하는 방식으로 public으로 약속을 한 것.
                                         
              → ③ default : 같은 패키지 내에서만 접근 가능
              → java_oop.src.zoo / java_oop.src.animal  참고


 ② 상속 (inheritance)
 ③ 다형성 (polymorphism) (OOP의 70%)

 ④ 캡슐화 (encapsulation)
  - 정보 은닉과 캡슐화를 동일한 것으로 설명하는 경우도 있으나, 다름.
  - 캡슐에 포장한 감기약 / 나쁜 캡슐화는 감기 증상에 따라 약을 각각 사서 각각 먹어야 하는데 그것을 언제,
    어떻게, 얼마나 먹어야 하는지와 같은 내용이 각기 다름에도, 최종 프로그램에서는 이것을 알지 못하고 약을 복용하게 되어 있음.
    
    좋은 캡슐화는 각각의 기능과 정보를 다 담은 약 하나를 가지고 사용자가 "그 기능이 정확히 어떤 것인지 몰라도" 약 하나만 있으면
    그것을 복용함으로써(하나의 키워드 = 함수 호출만 있으면) 내가 원하는 효과를 보게 되는 것.
  - 프로그램을 잘 짜는 방법에 대한 이야기. = 최종 소비자가 사용하기 편리하게 프로그램을 짜는 것.
  - 사용자가 프로그램 내용을 몰라도 프로그램을 최선의 방법으로 이용해, 최선의 효과를 얻도록 하는 것.

  
