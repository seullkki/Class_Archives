[자바 기초 - 3. 객체 지향(OOP)]



① 클래스 패스 
  - 한 클래스 안에도 사용할 여러 클래스를 만들 수 있음 (그 동안은 그냥 클래스마다 파일을 따로 만듦)
  - 이렇게 작성한 클래스는 컴파일하면(대표 클래스 하나만) 각각 클래스 파일로 만들어짐.
  - 그래야 객체를 생성했을 때, 각각 메모리에 올려서 서로 다른 주소를 가지는 객체로 만들 수 있음.

  - 그런데 만약 만들어진 클래스 파일들을 새로운 디렉토리를 만들어 넣어주면, 실행이 x.
  - 파일을 찾을 수 없기 때문.

  - 이 파일을 JVM이 찾기 위해 'set classpath' (= '환경변수' 이름) 키워드를 사용함.
    → 형태 : set classpath=.; 찾을 경로 입력
    → . 은 앞에 적힌 현재 디렉토리에서 찾는다는 의미 + ; 뒤에는 무한대로 함께 찾을 경로를 입력할 수 있음

  - ★ 절대 경로 : C:\ 로 시작하는 경로 / 가장 최상위 경로부터 경로를 적어주는 것
               (ex. C:\PackageStudy>set classpath=.;C:\PackageStudy\MyClass
                                                    --------------------------
                                                       여기부터 절대 경로               )
    ★ 상대 경로 : .\ xxx / 현재 디렉토리를 기준으로 지정한 경로
                 (ex. C:\PackageStudy>set classpath=.;.\MyClass
                                                      ----------
                                                       상대 경로                         
                                                       . 은 앞의 C:\PackageStudy 를 의미)
                                                                
                   → 결론은 같은 결과를 나타내지만 표현이 다름.

     cf.  - . : 현재 디렉토리
          - .. : 상위 디렉토리 (cd.. 을 입력하면, 상위 디렉토리로 위치 변경) 
          - 유닉스, 리눅스 계열 운영체제에서도 유효

  - 클래스 패스를 고정시키는 방법
     → 자바 설치했을 때 '환경변수' 설정하던 방법
     → 이유 : 자바의 경우, 자바 실행 파일이나 컴파일러 등 각 프로그램을 모든 프로그램에서 사용하기 위해.
              고정시키지 않았다면 필요한 자바 프로그램을 찾아서 매번 입력해줘야 할 것.
                              



② 패키지            → com.bit.Circle / com.bat.Circle / PackageTest 참고
  - 오픈소스를 사용하거나 타기업의 소스 코드를 사서 사용하는 경우, 클래스 이름이 겹치는 경우가 생길 수 있음.
    같은 이름의 유사한 기능을 가진 클래스를 사용해야 하는 경우, 문제가 생김.

    문제 ① 공간에서 충돌 : 같은 디렉토리에 같은 이름의 클래스 파일을 저장할 수 x.
         ② 접근 방법에서 충돌 : 해당 클래스로 인스턴스를 만들 때, 이름이 같으므로 어떤 인스턴스의 
                                    주소를 가리키는지 구분할 수 x.

  - 이 문제를 해결하고 클래스를 사용하기 위한 방법이 '패키지'

    문제 해결 ① 같은 클래스 이름을 가졌어도, 다른 패키지에 넣어주면 충돌하지 않아서 생성 가능.
                    (패키지라는 것은 기본적으로 "폴더"를 만들어 주는 것이고, 서로 다른 폴더에는 같은 이름의 클래스 파일도 저장이 가능해짐.)
    문제 해결 ② 인스턴스를 만들 때, 패키지 이름을 클래스 이름 앞에 명시해주면, 명시된 패키지에 있는 클래스를 불러올 수 있음.
                (객체를 생성하는 코드의 클래스에는 모두 패키지를 붙여야 함)

  ▶ import
  - Scanner를 사용할 때, import java.util.Scanner;를 사용하는 이유?
    java.util이라는 패키지에 있는 Scanner 클래스를 가져온다는 의미로, 만약 import를 써주지 않으면,
    Scanner scanner = new Scanner(System.in);
                       ↓
   java.util.Scanner scanner = new java.util.Scanner(System.in);   라고 써주어야 함.
   ( * 주의 : Scanner를 입력하면 이클립스에서 나오는 여러 개의 Scanner 중 내가 쓰려는 것이 어떤 것인지
              정확히 구분해야 함. 잘못 가져오면 다른 패키지의 scanner를 가져오게 됨)
  
  - import xxx.ooo.ccc. *;
    : " *; " 는 'xxx.ooo.ccc.' 패키지 전체를 가져오겠다는 패키지 선언
    (보통은 많이 쓰지 않으나, 자바에서는 java.lang.System; 처럼 System만 입력해도 자동으로 java.lang
     패키지 전체를 가져오도록 함. -> 자바에서 지정해 놓은 클래스 이름과 개발자가 지정하는 이름이
     겹치지 않도록 하기 위함.)
