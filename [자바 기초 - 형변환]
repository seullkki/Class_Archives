[자바 기초 - 형변환]


 【 디버깅 70-80%가 형변환에서 문제인 경우. 항상 주의할 것】
 - 자바에서는 boolean형을 제외한 7개 타입들 간의 형변환이 자유로움
 - 연산 시 서로 다른 형끼리의 연산은 먼저 같은 형으로 맞춘 후 수행 가능


< 자동 형변환 >
 - 할당받은 메모리가 작은 것 → 큰 것으로의 형변환은 생략되고 연산됨. "값의 손실"이 없기 때문.
 
 - 손실이 없는 방향으로 (표현범위가 크고 + 소수점이 유지 되는 방향)으로 자동 형변환됨
   (ex. int num1 = 50, int num2 = 3167893678  →  num1+num2 = int + long  →  long형으로 자동 현변환 후 연산)
   
 - byte, short, char 연산은 자동 int 형변환 후 연산 : 자바가 32 bit 체제이기 때문

 - float 형의 표현 범위가 long 형보다 넓기 때문에, 할당 메모리 자체는 long형(8바이트) > float형(4바이트)이지만, 
   둘의 연산은 float형으로 자동 형변환 후 진행됨.
   long형의 4바이트를 버리고도 float 범위로 표현이 가능하기 때문.
   (ex. long num1 = 3, float num2 = 22.1f  →  num1+num2 = long + float  →  float 형 25.1)

 - 형변환 순서 : byte → short, char → int → long → float → double

 ★ 자동 형변환이 되는 경우 = 변수의 데이터 타입(최종으로 값을 넣을 그릇)이 연산 대상인 리터럴의 데이터 타입 중 상위(형변환 순서 중 상위)와
                             일치하는 경우에만 자동 형변환 됨.
                              (ex. int num = 10;
                                   num = num + 77L;
                                   
                                   → int + long 연산은 long으로 형변환 되는데, 변수 데이터타입인 long이었다면 long형으로 자동 형변환 됐을 것      
                                   → 그러나 연산 결과를 담는 그릇인 변수의 데이터타입이 int로 정해졌기 때문에,
                                     long형을 작은 그릇에 담을 수 없어 에러가 남.
                                     따라서 연산 결과를 int 그릇에 담으려면 강제 형변환을 해줘야 함.
                                   → num = (int)(num + 77L);                     // (short)여도 에러가 안나는 이유???



< 명시적 형변환 >
 - 자동 형변환의 역으로 변환(byte ← short, char ← int ← long ← float ← double)을 하려고 하면 가진 데이터의 보다 작은 메모리에 넣어야 하므로
   값이 손실됨.
   따라서 손실을 감수하고 강제로 형변환 해야 함.

   (ex. long num1 = 3000000007L, int num2 = (int) num1  
        → 전혀 다른 값이 출력됨. 8바이트 크기의 수를 4바이트 메모리에 넣으면, 앞의 4바이트는 날아가고 뒤의 4바이트만 남게 되기 때문)

   (ex. int num1 = 4, num2 = 3, double num3 = num1/num2  →  결과 : 1.0
       → 결과의 이유: 4를 3으로 나눴을 때 소수점 아래까지 표현이 되지 x. num3을 double 이라고 지정했어도 
       num1/num2의 연산은 int/int로 int 결과가 이미 나왔고, 나온 결과값을 실수화 했을 뿐임.
       따라서 연산이 완료되기 전에 형변환을 해주어야 결과값도 형변환된 상태로 출력할 수 있음.
       
       → double num3 = (double) num1 / num2
       → double / int 형태에서 double / double로 형변환 돼 결과도 double로 출력됨.
       → cf. double num3 = (double) num1 / (double)num2  = 결과는 같지만, 불필요한 코딩 )
       
Q. / 연산자는 나눴을 때 몫이 출력되는 연산자. double 형으로 바꿨다고 해도 소숫점 아래까지 표현되는 이유?
    A. 연산자가 몫만 출력하는 것은 데이터타입이 int인 경우만. / 연산의 결과가 전체를 출력하도록 하기 위해 double 형변환을 해준 것임.

    (ex. int kor = 90, eng = 90, math = 81, double avg = (kor + eng + math) / 3
         → 방법 ① double avg = (kor + eng + math) / 3.0
         → 방법 ② double avg = (kor + eng + math) / (double) 3
         → 방법 ③ 변수 중 하나 double 형변환,  double avg = (kor + eng + (double)math) / 3
         → 방법 ① 이 최선의 방법.
           ③의 경우는 원래 변수 세 개는 정수형 데이터가 들어갈 자리이므로, 굳이 double 형변환을 해서 메모리를 낭비할 필요가 x.
           소수점은 avg에서 필요하기 때문에 ①이 가장 간단하고 깔끔한 방법. )
 

