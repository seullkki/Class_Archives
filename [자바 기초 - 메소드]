[자바 기초 - 메소드]



* 메소드 = 함수(function) = f(x)
* ' x ' 는 함수식 안에 들어갈 어떤 수들을 대신한 표시 = 매개변수(parameter)
  그 x 안에 넣는 각각의 값들 = 인자 (argument)



① 메소드를 알아보는 방법
 - ( ) 가 붙은 것이 '메소드'  →   메소드이름( ) 
 - ex. main( ) : 메인 메소드 / println( ) : println 메소드



② 메소드 이름 규칙
 - 첫 글자 '소문자'
 - 합성어인 경우, 합성어의 첫 글자만 '대문자' / 소문자로 하고 싶다면 '스네이크 표기법'
 - ex. isPrimeNumber()  /  is_prime_number()
       → cf. 메소드의 결과값이 boolean 타입인 경우, 메소드 이름이 is로 시작하는 경우가 많음



③ 형태
 - 메소드의 '정의' (define, declare, implement) : 메소드 이름() + { }
 - 메소드의 '호출' (call, invoke) : 메소드 이름() + ;

 - ex. public class Ex01 {
            public static void main(String[] args) {
                 System.out.println("프로그램 시작");      → 여기서 정의된 메소드는 2개
                                                                     (main, hiEveryone)
                 System.out.println("33");                    → 호출된 메소드는 6개
                 System.out.println("22");
                 System.out.println("프로그램 끝");
            }

            public static void hiEveryone(int age) {
                  System.out.println("좋은 아침입니다");
                  System.out.println("제 나이는 " + age + "세 입니다");​
            }
       }


  - ex. 
          	public static void main(String[] args) {
	            	double myHeight = 175.9;
	            	hiEveryone(12, 12.5);
	            	hiEveryone(13, myHeight);
	            	byeEveryone();
           	} // main end
	
	          public static void hiEveryone(int age, double height) {
	            	System.out.println("제 나이는" + age + "세입니다");
	            	System.out.println("제 키는" + height + "cm입니다");
          	}
	
	          public static void byeEveryone() {
		            System.out.println("다음에 뵙겠습니다");
          	}



④ 메소드를 쓰는 이유
 - 똑같은 소스코드를 두 번 이상 반복해서 이용할 때
    (웬만하면 메소드로 만들어 놓는 것이 좋음 - 중복해서 사용할 가능성이 있기 때문)
 -  코드의 중복을 제거하고, 코드를 간결화하기 위해



⑤ 특징
 - 정의된 메소드의 매개변수는 여러 개가 될 수도 있음 = 호출 시 매개변수 순서에 따라 차례대로 인자를 입력해주면 메소드에 대입되어 출력됨.
                                                              
 - 정의된 메소드의 매개변수가 없을 수도 있음 = 없는 상태에서 호출 시, 정의된 메소드 안의 내용이 출력됨

 - 자바에서는 메소드의 정의가 호출보다 먼저 오든, 나중에 오든, 순서 상관 x. 

 - 메소드의 정의는 각각 독립적 = 메소드 안에 메소드를 정의할 수 x.
   = 메소드의 정의는 '클래스' 안에
   (ex. main 메소드 안에 새로운 메소드를 정의하면 에러남)
   (cf. 클래스는 변수 + 메소드로 이뤄져 있음)

 - 하나의 메소드는 하나의 기능만 담도록 함
    → 만일 하나의 메소드에 여러 기능이 담겨 있다면, 각 기능 별로 쪼개서 메소드로 만들어야 함

 - 메소드 정의에 들어가는 매개 변수(파라미터)에는 '변수의 선언'이 들어감
    → 즉, 변수가 선언되는 동시에 메모리에 공간이 할당된다는 의미
    → 주의점 : 초기화는 들어가면 x ( 초기화는 메소드 호출에서)

 - 메소드 호출에 들어가는 인자(argument) = 값 (value) 는 '상수'가 들어감

 - 변수 선언의 위치에 주의할 것
    → 변수는 선언한 위치에 따라 유효 범위(scope)가 달라짐
    → 변수는 {} 안에서만 유효 = {}를 벗어나는 순간 변수는 메모리에서 사라지고, 사용할 수 x
    → ★ {} 안에서 선언되고 사용될 때만 유효하다고 해서, "함수 안"에서만 유효한 변수를 '지역변수(local variable)'이라고 함 ★
        
        같은 유효 범위 안에서 같은 이름의 지역변수를 선언할 수 x.
                                         ↕
        클래스 안에 선언된 변수 = 인스턴스 변수 (유효범위는 { }안으로 같음)

 - 재귀 메소드 : 자기 함수 안에 자기 함수를 다시 넣는 것 (팩토리얼 문제)
    → n! = n * (n-1)!
    → ex. 팩토리얼 문제

      public class Ex02 {
      	public static void main(String[] args) {
		        System.out.println(" 3 factorial : " + factorial(3));
	        	System.out.println(" 12 factorial : " + factorial(12));
      	} // main end
	
	      public static int factorial(int num) {
	        	if(num == 1) {
	      		return 1;
		    }
    		return num * factorial(num-1);
      	}
      }  // class end 
            


⑥ return
 - 메소드 형태를 보면 ' ○○○ + 메소드 이름 ( ) '까지 사실상 메소드. (ex. void main( ) )
    → 여기서 ○○○는 메소드의 '리턴타입(= 반환 타입 = 메소드 결과의 데이터 타입)'
           ex.   boolean regStudent(String name) {                                  →   boolean : 리턴 타입 
                            .............                                               regStrudent : 메소드
                  return true;                                                          String name : 매개 변수
                  }                                                                     return true : 메소드의 반환값이 'true' (boolean 형)
                                                                                                      
 - 리턴타입으로는 "void + 9개 자료형"이 올 수 있음

 - void가 붙은 메소드는 결과값을 반환하지 않는다는 의미 = return을 쓰지 x
   void가 없는 메소드는 결과값을 반환한다는 의미 = return을 씀 = 반드시 리턴타입을 명시해줘야 함
 
 - return의 의미   1. 메소드가 호출된 영역으로 리턴타입에 맞는 값을 반환
                   2. 메소드 종료 
                      → return을 만나면 메소드가 종료되고, return 이후의 코드는 실행 x
                          (ex. if를 써서 예외 사항을 처리할 때, return을 줘서 원래 실행돼야 하는 코드까지
                               도달하지 못하도록 함  - 이 경우 void이지만 return을 써도 에러 x)
                      → 단, 조건문을 넣으면 return 값을 여러 개 줄 수 있음

 - return을 많이 포함하는 코드는 좋지 x.
   return은 꼭 결과값이라고 보기 보다는 + 종료의 의미까지 생각해야 함.
   정말 종료를 해야할 때 return을 써주고, 나머지 결과값을 주는 경우는 '변수'를 사용할 것



 + cf. public static void main(String[] args) { } 는 기본적인 완성 문법
       = 아무 것도 입력하지 않아도 지정된 이름의 클래스 파일이 생성되고 컴파일됨.
       = main 메소드는 자바와 사용자 간의 약속
         ('무언가 실행하고 싶다면 메인 메소드 안에 코드를 입력하자')
       = main 함수의 '정의' (호출 x)
 + cf. main 메소드를 호출하는 것 ? JVM (.java로 컴파일하면 JVM이 작동하면서 제일 먼저 main 메소드를 호출함)
                                             
 + 호출된 메소드에 포인터를 놓고 디버깅함 → f5키 → 메소드 정의 부분으로 들어감 → f6키로 한 줄씩 확인 가능
                                                                                                    
 + cf. 실무에서는 매개변수 = parameter = 인자를 혼용해서 사용
 

