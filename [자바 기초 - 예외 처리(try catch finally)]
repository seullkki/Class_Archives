[자바 기초 - 예외 처리(try catch finally)]




 - 활용을 잘 해야 좋은 프로그램을 짤 수 있음.
 - 사용하기 위해 알아야 할 내용의 양이 많음.



 1. 자바에서의 '예외'
    ① 오류(Error) : 시스템 상 비정상적인 상황일 때 
                     = 코드 상 문제 x 
                     = ex. 메모리가 꽉 찬 경우 등

                     → OS가 하는 일이기 때문에 해결할 방법이 X.

    ② 예외(Exception) : 개발자가 구현한 로직에서 발생하는 문제
	                 (단순 문법 문제가 아닌 실행 중간에 발생하는 '정상적이지 않은 상황')
		   (ex. 정수를 입력할 부분에 문자를 입력함, 나누기 연산에서 분모가 0 등)	
			  
		  → 자바에서는 예외처리에 대한 메커니즘 제공 = try catch finally
		  → 예외 클래스 안에 있는 모든 예외들은 '객체'
		  → 예외를 띄워주는 것은 'JVM'




 2. 예외의 종류
   ① checked Exception
       - 의미 : 컴파일 시점에 검사되는 예외
       - 클래스 : Exception에서 RuntimeException을 제외한 클래스
       
   ② unchecked Exception 
       - 의미 : 실행(런타임) 시 검사되는 예외
       - 클래스 : Exception 중 RuntimeException 클래스의 모든 자식 클래스
       - 구성 : RuntimeException - ArithmeticException
                               	 - InputMismatchException ...
                                 
   * 예외는 모두 객체
       
  
  
  
 3. try ~ catch
   - 의미 : 예외 처리를 위해 제공되는 기본 문법	

   - 원리 : 자바에서는 예외처리에 대한 메커니즘 제공 = try catch finally
              ( = 예외가 발생하면 예외 표시를 띄워주면서 + 프로그램이 작동 멈춤)
              ( = 예외가 발생하면 JVM이 main을 가진 곳에 예외에 대한 객체를 전달해 출력하면서 프로그램은 종료)
	      ( = try catch를 쓰지 않아도 된다는 )
              ( 여기에 try ~ catch를 넣어주면, 예외를 만났을 때 JVM이 프로그램을 중지시키는 게 아니라,
                예외 객체를 try ~ catch로 받아서 내가 지정한 결과를 출력하도록 함)

   - 여러 예외처리를 동시에 하는 방법 : catch ( 예외 종류 e ) { 예외 처리 방법 } catch ( 예외 종류 e ) { 예외 처리 방법 } .....
                                         → ( 예외 종류 e ) 는 "다형성이 적용"되었기 때문에 가능한 것임.
                                         → 위의 구체적인 예외 종류를 사용해도 되고, 이들의 부모인 'Exception'을 대신 넣어도 처리 가능.
                                         → 여러 예외를 쓸때 하나의 catch에 | (or 연산자)로 묶어주어도 됨.

   - 형태 : try {
              관찰 영역 (예외가 발생할 가능성이 있는 코드)
            }

            catch( 예외 종류 e ) {
              처리 방법 (예외가 발생했을 때 실행할 코드)
            }

          	→ ex.      try {
                          System.out.print(" a/b ... a? ");
                          int n1 = kb.nextInt();			        	// 만약 여기서 예외가 발생하면
                          System.out.print(" a/b ... b? ");			// 바로 catch로 가서 예외 객체를 찾아 그 안의 함수를 통해 에러 메시지를 출력해줌.
                          int n2 = kb.nextInt();			         	// = 다음 실행문은 진행하지 x
                          System.out.printf("%d / %d = %d \n", n1, n2, n1/n2);		
                       }																

                       catch(ArithmeticException e) {								
                          System.out.println(e.getMessage());		// getMessage 대신 		
                       }

                       System.out.println("Good Bye");	

   - try로 묶을 영역을 지정하는 것은 개발자의 몫
     → 실행문마다 나눠 try ~ catch를 주는 것보다, 크게 하나로 묶어 try ~ catch를 주는 것이 더 좋음.
       (어떤 걸 입력 받는지, 논리 등에 따라 나눌 수도 있음. 단, try ~ catch는 많이 넣으면 컴퓨터 성능이 떨어질 수 있음)





 4. Throwable 클래스
   - 의미 : 모든 예외의 조상이되는 Exception 클래스 + 모든 오류의 조상이 되는 Error 클래스의 부모 클래스

   - Throwable 클래스 메소드 종류
     ①  public String getMessage() : 예외의 원인을 담고 있는 문자열을 반환
  
     ② public void printStackTrace() : 예외가 발생한 위치와 호출된 메소드의 정보를 출력 (아래에 나타난 예외부터 가장 먼저 발생한 예외임)
    			                           
         → cf. Stack : 차례대로 차곡 차곡 쌓아서 보여주는 공간 / 방식 (자료구조 중 하나)





 5. 예외의 전달
    - ex.class ExceptionMessage {
             public static void md1(int n) {
                md2(n, 0);                               // 아래의 메소드 호출
             }

             public static void md2(int n1, int n2) {
                int r = n1 / n2;                         // 예외 발생 지점
             }

             public static void main(String[] args) {
                   try {				
                       md1(3);		                       // 함수2를 한 번 거친 더 앞에 있는 함수도 예외를 처리할 수 있음
                   }
                       catch(Throwable e) {	             // Arithmetic 예외가 아닌 Throwable 예외를 넣어줘도 처리됨
                       e.printStackTrace();	               (★다형성이 적용되었기 때문에)
                   }

               System.out.println("Good bye~~!");

             }
         }
         
	   → main 메소드는 static 이기 때문에 인스턴스 메소드를 호출해올 수가 없음. 
       따라서 main 메소드에서 다른 클래스의 메소드를 호출하려면 반드시 'static' 메소드로 만들어 주어야 함.
      
      
      
      
      
 6. RuntimeException에서 흔히 볼 수 있는 예외(Unchecked Exception)
    ① ClassCastException : 클래스 형변환이 잘못된 경우 = 클래스 형변환을 했지만, 형변환한 객체에 접근할 수 없는 경우
                            → ex. 
                                  Board(부모) pbd1 = new PBoard(); (자식)
                                  PBoard pbd2 = (PBoard)pbd1;   	// 자식 = 부모이지만, 자식 객체로 형변환했고 
                                                                  // pbd1은 이미 부모 + 자식 객체를 다 가지고 있기 때문에 오류 x.

                                  Board(부모) ebd1 = new Board(); (부모)
                                  PBoard ebd2 = (PBoard)ebd1; 		 //  ebd1에 부모 객체만 있기 때문에 ebd1을 
                                                                   //  자식 객체로 형변환해도 자식 객체의 데이터를 찾을 수 없음.


    ② ArrayIndexOutOfBoundsException : 배열에서 인덱스 길이를 벗어난 인덱스를 호출했을 때

    ③ NullPointerException : null인 상태를 가리키려고 할 때 나타나는 예외
                             → ex. 
                                     public static void main(String[] args) {
                                         String str = null;
                                         System.out.println(str);    // null 출력 - 기존 인스턴스와의 관계가 끊긴 '빈 공간' 상태                 
                                         int len = str.length();     // 예외 - 현재 인스턴스가 없는 상태인데, 그 안의 문자열의 길이를
                                     }                                  출력하라고 했기 때문에 예외 발생
                                    
    ④ AritmeticException : 분모가 0이 입력되었을 때
    ⑤ NegativeArraySizeException : 배열 길이가 음수로 지정되었을 때
    ⑥ ArrayStoreException
    
    
    
    
    
  7. checked Exception
   - 의미 : 코드 문법적 예외가 아닌, 프로그램 실행 과정에서 발생하는 예외.

   - 주의 사항 : ★예외의 처리를 어떻게 할 것인지 반드시 명시해야 함.
	      	 (ex. IOExecption)

   - 특징 
       → ★ try catch를 사용하지 않으면 예외가 발생한 부분에 빨간 줄이 그어지면서 에러가 뜸.
            (cf. unchecked Exception은 try catch를 쓰지 않아도 빨간 줄 에러가 뜨진 x)
            즉, 반드시 예외 처리를 직접 해주어야만 함.(try catch)
            (RuntimeException 이외에는 거의 다 직접 예외 처리를 해주어야 함)

   - 예외 처리 방법
     ① try catch
          → 직접 처리하는 방법
	  
     ② throws
          → 넘기는 방법
	  
          → 형태 : 함수 이름 () + throws + checked Exception 객체 { 함수 구현 내용 }
	  
          → 의미 : 함수 구현 내용 중에 예외가 발생하면, 발생한 예외의 객체를 해당 함수가 "호출된 부분으로" 넘김.
	           호출된 부분에서 발생한 예외는 다시 호출된 함수가 속한 함수(함수 정의 부분)가 호출된 부분으로 넘김.
	           이것을 최종적으로 try catch에서 받으면 예외 처리를 할 수 있음.
		   던지다 보면 main 메소드까지 가게 됨.
          → cf. main 함수 뒤에 throws Exception을 입력하면, main 함수에서 발생한 모든 예외가 JVM으로 넘어감
	       (이 방법은 실전에서는 쓰지 X, 교육용)
          → cf. throws 예외 객체, 예외 객체, .... 으로 여러 발생 가능한 예외들을 함께 적을 수도 있음
          → cf. 실전에서는 Exception을 쓰기 보다, 정확한 예외 객체를 때마다 사용해주는 것이 좋음.
	    


   
 8. 잘못된 catch
    - catch를 여러 개 써줄 때, Exception(예외들의 부모가 되는 객체)가 오면 그 아래로 오는 모든 예외 객체에
      에러가 생김 
       → 이유 : "다형성" 때문 (Exception 아래의 catch까지 도달하지 못하기 때문)
       → 수정 방법 : 따라서 부모가 되는 예외 객체는 가장 마지막에 두어야 함.



 9. finally
    - 형태 : try { } + catch( ) { } + finally { }
    - 의미 : catch가 있다면 반드시 finally를 타게 되어 있음.
	       → try 내용이 예외가 발생하든, 하지 않든 무조건 finally는 실행됨.
	       
	       →그래서 finally에는 예외와 상관 없이 실행해야 하는 명령들을 finally에 넣어주도록 함.
		(ex. writer.close(); 등 메모리에서 더이상 쓰지 않는 메모리를 삭제하기 위한 명령들)
		  
	       →그러나 finally의 내용도 예외가 발생할 수 있기 때문에, 그 안에 다시 try catch를 넣어줘야 함.

    - 'try - with - resources' (1.7 버전 이상에서 지원)
       → 형태 : try ( "객체 생성" ) { } catch ( ) { } 
       → finally 대신 try ( ) 안에 객체를 생성(= resources)해줌으로써, try catch 안에서 해당 객체에 대한 메모리 관리 (close까지) 해주도록 함.
       → try 안에 Autocloseable을 implements 해주고 있기 때문에 가능
       → try 문을 빠져나갈 때 close 해줌.
