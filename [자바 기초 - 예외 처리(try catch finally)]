[자바 기초 - 예외 처리(try catch finally)]




 - 활용을 잘 해야 좋은 프로그램을 짤 수 있음.
 - 사용하기 위해 알아야 할 내용의 양이 많음.



 1. 자바에서의 '예외'
    ① 오류(Error) : 시스템 상 비정상적인 상황일 때 
                     = 코드 상 문제 x 
                     = ex. 메모리가 꽉 찬 경우 등

                     → OS가 하는 일이기 때문에 해결할 방법이 X.

    ② 예외(Exception) : 개발자가 구현한 로직에서 발생하는 문제
	                 (단순 문법 문제가 아닌 실행 중간에 발생하는 '정상적이지 않은 상황')
		   (ex. 정수를 입력할 부분에 문자를 입력함, 나누기 연산에서 분모가 0 등)	
			  
		  → 자바에서는 예외처리에 대한 메커니즘 제공 = try catch finally
		  → 예외 클래스 안에 있는 모든 예외들은 '객체'
		  → 예외를 띄워주는 것은 'JVM'




 2. 예외의 종류
   ① checked Exception
       - 의미 : 컴파일 시점에 검사되는 예외
       - 클래스 : Exception에서 RuntimeException을 제외한 클래스
       
   ② unchecked Exception 
       - 의미 : 실행(런타임) 시 검사되는 예외
       - 클래스 : Exception 중 RuntimeException 클래스의 모든 자식 클래스
       - 구성 : RuntimeException - ArithmeticException
                               	 - InputMismatchException ...
                                 
   * 예외는 모두 객체
       
  
  
  
 3. try ~ catch
   - 의미 : 예외 처리를 위해 제공되는 기본 문법

   - 원리 : 자바에서는 예외처리에 대한 메커니즘 제공 = try catch finally
              ( = 예외가 발생하면 예외 표시를 띄워주면서 + 프로그램이 작동 멈춤)
              ( = 예외가 발생하면 JVM이 main을 가진 곳에 예외에 대한 객체를 전달해 출력하면서 프로그램은 종료)
              ( 여기에 try ~ catch를 넣어주면, 예외를 만났을 때 JVM이 프로그램을 중지시키는 게 아니라,
                예외 객체를 try ~ catch로 받아서 내가 지정한 결과를 출력하도록 함)

   - 여러 예외처리를 동시에 하는 방법 : catch ( 예외 종류 e ) { 예외 처리 방법 } catch ( 예외 종류 e ) { 예외 처리 방법 } .....
                                         → ( 예외 종류 e ) 는 "다형성이 적용"되었기 때문에 가능한 것임.
                                         → 위의 구체적인 예외 종류를 사용해도 되고, 이들의 부모인 'Exception'을 대신 넣어도 처리 가능.
                                         → 여러 예외를 쓸때 하나의 catch에 | (or 연산자)로 묶어주어도 됨.

   - 형태 : try {
              관찰 영역 (예외가 발생할 가능성이 있는 코드)
            }

            catch( 예외 종류 e ) {
              처리 방법 (예외가 발생했을 때 실행할 코드)
            }

          	→ ex.      try {
                          System.out.print(" a/b ... a? ");
                          int n1 = kb.nextInt();			        	// 만약 여기서 예외가 발생하면
                          System.out.print(" a/b ... b? ");			// 바로 catch로 가서 예외 객체를 찾아 그 안의 함수를 통해 에러 메시지를 출력해줌.
                          int n2 = kb.nextInt();			         	// = 다음 실행문은 진행하지 x
                          System.out.printf("%d / %d = %d \n", n1, n2, n1/n2);		
                       }																

                       catch(ArithmeticException e) {								
                          System.out.println(e.getMessage());		// getMessage 대신 		
                       }

                       System.out.println("Good Bye");	

   - try로 묶을 영역을 지정하는 것은 개발자의 몫
     → 실행문마다 나눠 try ~ catch를 주는 것보다, 크게 하나로 묶어 try ~ catch를 주는 것이 더 좋음.
       (어떤 걸 입력 받는지, 논리 등에 따라 나눌 수도 있음. 단, try ~ catch는 많이 넣으면 컴퓨터 성능이 떨어질 수 있음)





 4. Throwable 클래스
   - 의미 : 모든 예외의 조상이되는 Exception 클래스 + 모든 오류의 조상이 되는 Error 클래스의 부모 클래스

   - Throwable 클래스 메소드 종류
     ①  public String getMessage() : 예외의 원인을 담고 있는 문자열을 반환
  
     ② public void printStackTrace() : 예외가 발생한 위치와 호출된 메소드의 정보를 출력 (아래에 나타난 예외부터 가장 먼저 발생한 예외임)
    			                           
         → cf. Stack : 차례대로 차곡 차곡 쌓아서 보여주는 공간 / 방식 (자료구조 중 하나)





 5. 예외의 전달
    - ex.	class ExceptionMessage {
             public static void md1(int n) {
                md2(n, 0);                               // 아래의 메소드 호출
             }

             public static void md2(int n1, int n2) {
                int r = n1 / n2;                         // 예외 발생 지점
             }

             public static void main(String[] args) {
                   try {				
                       md1(3);		                       // 함수2를 한 번 거친 더 앞에 있는 함수도 예외를 처리할 수 있음
                   }
                       catch(Throwable e) {	             // Arithmetic 예외가 아닌 Throwable 예외를 넣어줘도 처리됨
                       e.printStackTrace();	               (★다형성이 적용되었기 때문에)
                   }

               System.out.println("Good bye~~!");

             }
         }
         
	   → main 메소드는 static 이기 때문에 인스턴스 메소드를 호출해올 수가 없음. 
       따라서 main 메소드에서 다른 클래스의 메소드를 호출하려면 반드시 'static' 메소드로 만들어 주어야 함.
      
      
      
      
      
 6. RuntimeException에서 흔히 볼 수 있는 예외
    ① ClassCastException : 클래스 형변환이 잘못된 경우 = 클래스 형변환을 했지만, 형변환한 객체에 접근할 수 없는 경우
                            → ex. 
                                  Board(부모) pbd1 = new PBoard(); (자식)
                                  PBoard pbd2 = (PBoard)pbd1;   	// 자식 = 부모이지만, 자식 객체로 형변환했고 
                                                                  // pbd1은 이미 부모 + 자식 객체를 다 가지고 있기 때문에 오류 x.

                                  Board(부모) ebd1 = new Board(); (부모)
                                  PBoard ebd2 = (PBoard)ebd1; 		 //  ebd1에 부모 객체만 있기 때문에 ebd1을 
                                                                   //  자식 객체로 형변환해도 자식 객체의 데이터를 찾을 수 없음.


    ② ArrayIndexOutOfBoundsException : 배열에서 인덱스 길이를 벗어난 인덱스를 호출했을 때

    ③ NullPointerException : null인 상태를 가리키려고 할 때 나타나는 예외
                             → ex. 
                                     public static void main(String[] args) {
                                         String str = null;
                                         System.out.println(str);    // null 출력 - 기존 인스턴스와의 관계가 끊긴 '빈 공간' 상태                 
                                         int len = str.length();     // 예외 - 현재 인스턴스가 없는 상태인데, 그 안의 문자열의 길이를
                                     }                                  출력하라고 했기 때문에 예외 발생
                                    


